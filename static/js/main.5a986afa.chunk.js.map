{"version":3,"sources":["reducers/rootReducer.js","reducers/configReducer.js","store.js","serviceWorker.js","actions/setThemeAction.js","views/landing/style.js","views/landing/index.js","App.js","index.js"],"names":["combineReducers","config","state","action","type","theme","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Boolean","location","hostname","match","themes","day","main","primary","background","night","Main","styled","div","Header","header","props","CustomSwitch","Switch","attrs","color","Link","a","href","target","rel","Body","CustomButton","Button","connect","dispatch","setThemeAction","value","onChange","event","checked","hist","createBrowserHistory","history","path","component","Landing","ReactDOM","render","StrictMode","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAGeA,cAAgB,CAC7BC,OCHa,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACrC,OAAQA,EAAOC,MACd,IAAK,YACJ,MAAO,CACNC,MAAOF,EAAOG,SAEhB,QACC,OAAOJ,MCMLK,EAAmBC,OAAOC,sCAAwCC,ICFpDC,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2D,0CClBAC,EAAS,CACbC,IAAK,CACHC,KAAM,CACJC,QAAS,OACTC,WAAY,YAGhBC,MAAO,CACLH,KAAM,CACJC,QAAS,MACTC,WAAY,a,mtBCNX,IAAME,EAAOC,IAAOC,IAAV,KAIJC,EAASF,IAAOG,OAAV,KACG,SAAAC,GAClB,OAAOA,EAAMrB,MAAMY,KAAKE,cAQjB,SAAAO,GAAK,OAAIA,EAAMrB,MAAMY,KAAKC,WAuBxBS,EAAeL,YAAOM,KAAQC,OAAM,SAAAH,GAAK,MAAK,CACzDI,MAAO,aADmBR,CAAH,KAIZS,EAAOT,IAAOU,EAAEH,OAAM,SAAAH,GAAK,MAAK,CAC3CO,KAAMP,EAAMO,KACZC,OAAQ,SACRC,IAAK,yBAHab,CAAH,KAQJc,EAAOd,IAAOC,IAAV,KACK,SAAAG,GAAK,OAAIA,EAAMrB,MAAMY,KAAKE,cACrC,SAAAO,GAAK,OAAIA,EAAMrB,MAAMY,KAAKC,WAGxBmB,EAAef,YAAOgB,KAAQT,OAAM,SAAAH,GAAK,MAAK,CACzDI,MAAO,aADmBR,CAAH,KC9BzB,IAQeiB,eAJS,SAAArC,GAAK,sBACxBA,MALsB,SAAAsC,GAAQ,MAAK,CACtCC,eAAgB,SAACpC,GAAD,OAAWmC,EFdC,SAACnC,GAAD,OAAW,SAAAmC,GACvCA,EAAS,CACRpC,KAAM,YACNE,QAASS,EAAOV,MEWmBoC,CAAepC,QAOtCkC,EA3Bf,SAAiBb,GAMf,OACE,kBAACL,EAAD,KACE,kBAACG,EAAD,KACE,kBAACG,EAAD,CAAce,MAAM,QAAQC,SARd,SAACC,GACnB,IAAMvC,EAAQuC,EAAMV,OAAOW,QAAU,QAAU,MAC/CnB,EAAMe,eAAepC,MAOjB,kBAAC0B,EAAD,CAAME,KAAK,2CAAX,eAEF,kBAACG,EAAD,KACE,kBAACC,EAAD,yBCVFS,EAAOC,cAmBER,mBAjBS,SAAArC,GACtB,MAAO,CACLG,MAAOH,EAAMD,OAAOI,SAeTkC,EAXf,SAAab,GACX,OACE,kBAAC,IAAD,CAAerB,MAAOqB,EAAMrB,OAC5B,kBAAC,IAAD,CAAQ2C,QAASF,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,KAAK,IAAIC,UAAWC,MAH/B,QCbJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MNKC,WAAwD,IAAhCC,EAA+B,uDAZ1C,CAC1BvD,OAAQ,CACNI,MAAO,CACLY,KAAM,CACJC,QAAS,OACTC,WAAY,cAQnB,OAAOsC,YACLC,EACAF,EACAjD,EAAiBoD,YAAgBC,OMTfC,IACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a986afa.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport config from './configReducer';\n\nexport default combineReducers({\n  config\n});","\nexport default (state = {}, action) => {  \n  switch (action.type) {\n   case 'SET_THEME':\n    return {\n     theme: action.payload\n    }\n   default:\n    return state\n  }\n };\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nconst defaultState = () => ({\n  config: {\n    theme: {\n      main: {\n        primary: \"blue\",\n        background: \"#ffffff\",\n      },\n    },\n  },\n});\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default function configureStore(initialState = defaultState()) {\n return createStore(\n   rootReducer,\n   initialState,\n   composeEnhancers(applyMiddleware(thunk))\n );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const themes = {\n  day: {\n    main: {\n      primary: \"blue\",\n      background: \"#ffffff\",\n    },\n  },\n  night: {\n    main: {\n      primary: \"red\",\n      background: \"#282c34\",\n    },    \n  },\n};\n\nexport const setThemeAction = (theme) => dispatch => {\n  dispatch({\n   type: 'SET_THEME',\n   payload: themes[theme],\n  })\n }\n","import styled from 'styled-components';\nimport { Button, Switch } from '@material-ui/core';\n// import logo from './logo.svg';\n\nexport const Main = styled.div`\n  text-align: center;\n`;\n\nexport const Header = styled.header`\n  background-color: ${props => {\n    return props.theme.main.background;\n  }};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${props => props.theme.main.primary};\n`;\n\n// const rotate = keyframes`\n//   from {\n//     transform: rotate(0deg);\n//   }\n//   to {\n//     transform: rotate(360deg);\n//   }\n// `;\n\n// export const RotatingLogo = styled.img.attrs({\n//   src: logo,\n//   alt: 'logo',\n// })`\n//   height: 40vmin;\n//   pointer-events: none;\n//   @media (prefers-reduced-motion: no-preference) {\n//     animation: ${rotate} infinite 20s linear;\n//   }\n// `;\n\nexport const CustomSwitch = styled(Switch).attrs(props => ({\n  color: 'primary',\n}))``;\n\nexport const Link = styled.a.attrs(props => ({\n  href: props.href,\n  target: '_blank',\n  rel: 'noopener noreferrer',\n}))`\n  color: #61dafb;\n`;\n\nexport const Body = styled.div`\n  background-color: ${props => props.theme.main.background};\n  color: ${props => props.theme.main.primary};\n`;\n\nexport const CustomButton = styled(Button).attrs(props => ({\n  color: 'primary',\n}))``;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { setThemeAction } from '../../actions/setThemeAction';\n\nimport {\n  Main, Header, Link, Body, CustomButton, CustomSwitch,\n} from './style';\n\nfunction Landing(props) {\n  const toggleTheme = (event) => {\n    const theme = event.target.checked ? 'night' : 'day';\n    props.setThemeAction(theme);\n  }\n\n  return (\n    <Main>\n      <Header>\n        <CustomSwitch value=\"night\" onChange={toggleTheme}/>\n        <Link href='https://cibergarri.github.io/playground'>Playground</Link>\n      </Header>\n      <Body>\n        <CustomButton>Hello World</CustomButton>\n      </Body>\n    </Main>\n  );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setThemeAction: (theme) => dispatch(setThemeAction(theme))\n});\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Landing);\n","/*\n src/App.js\n*/\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { ThemeProvider } from 'styled-components';\n\n// Routes\nimport Landing from './views/landing/index.js';\n\nconst hist = createBrowserHistory();\n\nconst mapStateToProps = state => {\n  return {\n    theme: state.config.theme,\n  };\n}\n\nfunction App(props) {\n  return (\n    <ThemeProvider theme={props.theme}>\n    <Router history={hist}>\n      <Switch>\n        <Route path=\"/\" component={Landing} />\n      </Switch>\n    </Router>,\n  </ThemeProvider>\n  )\n}\nexport default connect(mapStateToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}