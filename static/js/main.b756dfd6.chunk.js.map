{"version":3,"sources":["reducers/rootReducer.js","reducers/configReducer.js","store.js","serviceWorker.js","index.js"],"names":["combineReducers","config","state","action","type","theme","payload","loading","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","paths","name","initialState","getStateFromCookies","Boolean","location","hostname","match","App","React","lazy","ReactDOM","render","StrictMode","store","createStore","rootReducer","applyMiddleware","thunk","reduxCookiesMiddleware","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAGeA,cAAgB,CAC7BC,OCHa,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACrC,OAAQA,EAAOC,MACb,IAAK,YACH,OAAO,eACFF,EADL,CAEEG,MAAOF,EAAOG,UAElB,IAAK,cACH,OAAO,eACFJ,EADL,CAEEK,QAASJ,EAAOG,UAEpB,QACE,OAAOJ,MCAPM,EAAmBC,OAAOC,sCAAwCC,IAGlEC,EAAQ,CACZ,eAAgB,CAAEC,KAAM,aAGpBC,EAAeC,8BAbU,CAC7Bd,OAAQ,CACNI,MAJkB,SAKlBE,SAAS,IAU+CK,GAC5DE,EAAab,OAAOI,MAAQS,EAAab,OAAOI,OAhB1B,SCOFW,QACW,cAA7BP,OAAOQ,SAASC,UAEkB,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MAC1B,2D,WCXAC,EAAMC,IAAMC,MAAK,kBAAM,uDAE7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MFaLC,YACLC,EACAd,EACAN,EAAiBqB,YACfC,IACAC,IAAuBnB,OEjBvB,kBAAC,WAAD,CAAUoB,SAAU,4CAAuB,kBAACZ,EAAD,SAG/Ca,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b756dfd6.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport config from './configReducer';\n\nexport default combineReducers({\n  config,\n});\n","\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_THEME':\n      return {\n        ...state,\n        theme: action.payload,\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport reduxCookiesMiddleware, { getStateFromCookies } from 'redux-cookies-middleware';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './reducers/rootReducer';\n\nconst DEFAULT_THEME = 'normal';\n\nconst getDefaultState = () => ({\n  config: {\n    theme: DEFAULT_THEME,\n    loading: true,\n  },\n});\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// state to persist in cookies\nconst paths = {\n  'config.theme': { name: 'my_theme' },\n};\n\nconst initialState = getStateFromCookies(getDefaultState(), paths);\ninitialState.config.theme = initialState.config.theme || DEFAULT_THEME;\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(\n      thunk,\n      reduxCookiesMiddleware(paths),\n    )),\n  );\n}\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n// Deferred load of the App so the static html with the css animation loads very fast\nconst App = React.lazy(() => import('./App'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <Suspense fallback={<div>Loading...</div>}><App /></Suspense>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}