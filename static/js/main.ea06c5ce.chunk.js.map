{"version":3,"sources":["views/app/logo.svg","views/landing/logo.svg","serviceWorker.js","views/app/style.js","views/app/App.js","views/landing/style.js","views/landing/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","rotate","keyframes","Main","styled","div","Header","header","Logo","img","attrs","src","logo","alt","Link","a","href","target","rel","App","props","theme","main","background","primary","Body","CustomButton","Button","color","hist","createBrowserHistory","ReactDOM","render","StrictMode","history","path","component","Landing","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,2JCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+1BCfN,IAAMC,EAASC,YAAH,KASCC,EAAOC,IAAOC,IAAV,KAIJC,EAASF,IAAOG,OAAV,KAWNC,EAAOJ,IAAOK,IAAIC,MAAM,CACnCC,IAAKC,IACLC,IAAK,QAFaT,CAAH,IAOAH,GAIJa,EAAOV,IAAOW,EAAEL,MAAM,CACjCM,KAAM,sBACNC,OAAQ,SACRC,IAAK,uBAHad,CAAH,KClBFe,MAdf,WACE,OACE,kBAAChB,EAAD,KACE,kBAACG,EAAD,KACE,kBAACE,EAAD,CAAMK,IAAI,SACV,mCACO,4CADP,wBAGA,kBAACC,EAAD,uB,qgCCVR,IAAMb,EAASC,YAAH,KASCC,EAAOC,IAAOC,IAAV,KAIJC,EAASF,IAAOG,OAAV,KACG,SAAAa,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,cAOrC,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,KAAKE,WAcxBV,GAXOV,IAAOK,IAAIC,MAAM,CACnCC,IAAKC,IACLC,IAAK,QAFaT,CAAH,IAOAH,GAIGG,IAAOW,EAAEL,MAAM,CACjCM,KAAM,+CACNC,OAAQ,SACRC,IAAK,uBAHad,CAAH,MAQJqB,EAAOrB,IAAOC,IAAV,KACK,SAAAe,GAAK,OAAIA,EAAMC,MAAMC,KAAKC,cACrC,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,KAAKE,WAExBE,EAAetB,YAAOuB,KAAQjB,OAAM,SAAAU,GAAK,MAAK,CACzDQ,MAAO,aADmBxB,CAAH,KC3BVe,MAjBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KAKE,kBAAC,EAAD,oBAEF,kBAACM,EAAD,KACE,kBAACC,EAAD,uBCNFG,EAAOC,cASbC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeZ,MATL,CACZC,KAAM,CACJE,QAAS,QACTD,WAAY,aAOV,kBAAC,IAAD,CAAQW,QAASL,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,KAAK,OAAOC,UAAWjB,IAC9B,kBAAC,IAAD,CAAOgB,KAAK,IAAIC,UAAWC,MAJjC,MASFC,SAASC,eAAe,SLmGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea06c5ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled, { keyframes } from 'styled-components';\nimport logo from './logo.svg';\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nexport const Main = styled.div`\n  text-align: center;\n`;\n\nexport const Header = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const Logo = styled.img.attrs({\n  src: logo,\n  alt: 'logo',\n})`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${rotate} infinite 20s linear;\n  }\n`;\n\nexport const Link = styled.a.attrs({\n  href: \"https://reactjs.org\",\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n})`\n  color: #61dafb;\n`;\n","import React from 'react';\n\nimport {\n  Main, Header, Logo, Link,\n} from './style';\n\nfunction App() {\n  return (\n    <Main>\n      <Header>\n        <Logo alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <Link>Learn React</Link>\n      </Header>\n    </Main>\n  );\n}\n\nexport default App;\n","import styled, { keyframes } from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport logo from './logo.svg';\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nexport const Main = styled.div`\n  text-align: center;\n`;\n\nexport const Header = styled.header`\n  background-color: ${props => props.theme.main.background};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${props => props.theme.main.primary};\n`;\n\nexport const Logo = styled.img.attrs({\n  src: logo,\n  alt: 'logo',\n})`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${rotate} infinite 20s linear;\n  }\n`;\n\nexport const Link = styled.a.attrs({\n  href: \"https://cibergarri.github.io/home/playground\",\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n})`\n  color: #61dafb;\n`;\n\nexport const Body = styled.div`\n  background-color: ${props => props.theme.main.background};\n  color: ${props => props.theme.main.primary};\n`;\nexport const CustomButton = styled(Button).attrs(props => ({\n  color: \"primary\",\n}))``;\n","import React from 'react';\n\n\nimport {\n  Main, Header, Logo, Link, Body, CustomButton\n} from './style';\n\nfunction App() {\n  return (\n    <Main>\n      <Header>\n        {/* <Logo alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p> */}\n        <Link>Playground</Link>\n      </Header>\n      <Body>\n        <CustomButton>Hello World</CustomButton>\n      </Body>\n    </Main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { ThemeProvider } from 'styled-components';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nimport App from './views/app/App.js';\nimport Landing from './views/landing/index.js';\n\nconst hist = createBrowserHistory();\n\nconst theme = {\n  main: {\n    primary: \"white\",\n    background: \"#282c34\",\n  },\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Router history={hist}>\n        <Switch>\n          <Route path=\"/app\" component={App} />\n          <Route path=\"/\" component={Landing} />\n        </Switch>\n      </Router>,\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}